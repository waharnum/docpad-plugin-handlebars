// Generated by CoffeeScript 2.3.2
var hasProp = {}.hasOwnProperty;

module.exports = function(BasePlugin) {
  var HandlebarsPlugin;
  return HandlebarsPlugin = (function() {
    // Define Plugin
    class HandlebarsPlugin extends BasePlugin {
      // Constructor
      setConfig(config) {
        var docpad, handlebars, helper, name, partial, ref, ref1, results;
        // Super
        super.setConfig(config);
        // Prepare
        docpad = this.docpad;
        handlebars = this.handlebars = require('handlebars');
        this.precompileOpts = this.config.precompileOpts || {};
        // Add helpers, if defined in docpad.cson
        if (this.config.helpers) {
          ref = this.config.helpers;
          for (name in ref) {
            if (!hasProp.call(ref, name)) continue;
            helper = ref[name];
            handlebars.registerHelper(name, helper);
          }
        }
        // Add partials, if defined in docpad.cson
        if (this.config.partials) {
          ref1 = this.config.partials;
          results = [];
          for (name in ref1) {
            if (!hasProp.call(ref1, name)) continue;
            partial = ref1[name];
            results.push(handlebars.registerPartial(name, partial));
          }
          return results;
        }
      }

      // Render some content
      render(opts) {
        var content, handlebars, inExtension, outExtension, output, templateData;
        // Prepare
        ({inExtension, outExtension, templateData, content} = opts);
        handlebars = this.handlebars;
        if (inExtension === 'hb' || inExtension === 'hbs' || inExtension === 'handlebars') {
          if (outExtension === 'js' || outExtension === 'inlinejs') {
            output = this.handlePrecompileOpts(opts);
          } else {
            output = handlebars.compile(opts.content)(templateData);
          }
          return opts.content = output;
        }
      }

      handlePrecompileOpts(opts) {
        var argv, post, pre, ref, templateName;
        argv = this.precompileOpts;
        if (argv.wrapper == null) {
          argv.wrapper = "default";
        }
        if (argv.amdPath == null) {
          argv.amdPath = "";
        }
        pre = post = "";
        templateName = opts.file.attributes.slug;
        if (argv.wrapper === "amd") {
          pre += 'define([\'' + argv.amdPath + 'handlebars\'], function(Handlebars) {\n';
        }
        if (argv.wrapper === "default") {
          pre += '(function() {\n';
        }
        if (((ref = argv.wrapper) === "default" || ref === "amd")) {
          pre += '  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};\n';
          pre += 'templates[\'' + templateName + '\'] = template(';
          post += ');\n';
        }
        if (argv.wrapper === "amd") {
          post += '});';
        }
        if (argv.wrapper === "default") {
          post += '})();';
        }
        return pre + this.handlebars.precompile(opts.content) + post;
      }

    };

    // Plugin name
    HandlebarsPlugin.prototype.name = 'handlebars';

    // Handlebars
    HandlebarsPlugin.prototype.handlebars = null;

    return HandlebarsPlugin;

  }).call(this);
};
